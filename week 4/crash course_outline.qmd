---
title: "Using R to write your thesis"
author: "Jordan Rustad"
format: html
editor: visual
bibliography: references.bib
---

## I want to write my thesis in R. What does that even mean?? Where do I begin?

Beginning to use R is a daunting enough task, and hearing words like 'repo' and 'yaml' is enough to make your head spin when you are starting out. The purpose of this R-hour (and this document) is to walk you through the steps you would need to write your thesis in R and how you can use GitHub to version your code. If you miss R hour, there should be enough information here that you can walk through it yourself. We will linking R-Studio with Zotero to insert citations, and GitHub so you can do everything through R-Studio. I have provided alternatives with Shiny apps/GUIs when possible. I will also show you how to use GitHub as a collaborative tool so at the very least you can share your code with your supervisor or collaborators. Make sure you complete the pre-session tasks before coming to R-hour.

[**I will be in the lab and available to help with these tasks on Thursday at 10:00 to help with trouble shooting.**]{.underline}

This is meant as a taster, and not an absolute way to use R, Zotero, or GitHub. Other people will prefer a different reference manager, or use Git for Desktop rather than linking it with R. The purpose of today is to give you an example of a reproducible workflow, so that you can piece together what you did when it comes time to write your thesis and publish your manuscripts. Odds are, a reviewer will have questions about your analyses or why you did certain things. This is meant to save you headaches later.

### Pre-session Tasks:

[**Before R Hour:**]{.underline}

-   Download R Studio and a markdown package:

    -   **rmarkdown** - as a package

    <!-- -->

    -   Quarto - as an extension (requires extra packages to render certain document types)

        -   This is what I use as it has slightly more versatility than and simple rmd file

        -   [Download here](https://quarto.org/docs/download/)

    -   There are many types of markdown files so you can shop around and pick one, but this tutorial will focus on 'rmarkdown'

-   Reference Manager

    -   Download Zotero and get at least one paper in your library

    -   Instructions: (From LDP 2022 Course Materials)

        -   **C. Zotero and Zotfile reference management software**

            -   Set up a [Zotero account](https://www.zotero.org/user/login/)

                -   See [this page](https://ubco-biology.github.io/Procedures-and-Guidelines/reference-management-zotero.html) for information on getting started with Zotero

                -   You can use Zotero online or [download the desktop application](https://www.zotero.org/download/); \*\*Note added Sept 6th:\*\* the desktop application needs to be installed if you wish to use Zotfile or the browser add-ons (below).

                -   you also set up a [browser extension/connector](https://www.zotero.org/download/connectors) to allow for easy detection and saving of references

                -   [Zotfile plug-in](http://zotfile.com/) to manage attachments, sync PDFs from your Zotero library, and extract annotations

                -   [Zotero plug-in for RStudio](https://blog.rstudio.com/2020/11/09/rstudio-1-4-preview-citations/):

                    -   RStudio has native integration with Zotero as part of its Visual Markdown editor (requires RStudio v. 1.4 and later)

                    -   works without the BetterBibTeX plugin, but installing BetterBibTex can permit more control over item citation keys

                    -   We will learn more about working with [citations in Markdown](https://bookdown.org/pdr_higgins/rmrwr/adding-citations-to-your-rmarkdown.html) documents in Session 4

                        -   You can follow this tutorial to get started on adding in citations but don't feel like you have to

    -   GitHub

        -   Start here: <https://happygitwithr.com/install-intro> working through Chapters 4 to 12. This will ensure that R-Studio is linked to your GitHub account and that you are able to push/pull code. Great troubleshooting guide in Chapter 14 as well.

    ### Some terminology

    -   Repo = repository, specifically where you are storing code for a given project

    -   Commit = changes in your code; does not save to GitHub until you push it

    -   Push = passing code to GitHub (saves it to the cloud)

    -   Pull = getting code from GitHub; takes it to the cloud and saves it locally (on your computer)

    -   Branch = part of a repo; there is usually a main branch (that you avoid pushing to) and then the branches you make to push edits to, and then combine with your main branch

    -   Clone = create a copy of a repo; you can start R-projects from cloned repos

    -   renv = R environment file; this is a copy of your version of R and all of the packages you used for your R project; a way to ensure you don't accidentally install a new version of R and nothing works

    -   workflow = the steps you take to complete a given project; ex. daily R coding: write code in R, run the code, save results, (pull from Git if I've worked online), commit to Git, push to Git

## Session Tasks

1.  Create a branch on a Github project
2.  Create an R project using a cloned GitHub repository
    1.  load renv file
3.  Create example script and markdown document with citations
4.  Render Rmarkdown doc
5.  Commit changes and push to our Github account
6.  Demo of pull request and merging changes

### 1. Create a branch on a GitHub repo

You are going to create a branch on my [R-hour repository](https://github.com/jordanrustad/R_Hour) from GitHub.

Go to the repo page. Click on Branches (my main branch is called 'main')

A menu will come up with all existing branches. To create a new one, start typing what you would like to name it. For simplicity sake called it 'your_name's branch'

Creating a branch creates a copy of the main branch. By branching repos you can prevent fatal errors from affecting all of your code. Instead you push changes to a branch, and then merge branches (more on that later).

### 2. Create an R project using a Cloned GitHub repo (load renv file)

Click Code in the right hand corner. Make sure you are in the Local tab, and click Copy URL. (I always forget where it is so I have put in this picture).

![](tutorial_images/Picture1.png)

Open R Studio. Make sure you don't have any other R Projects open. The R project title in the top right hand corner should say None.

Click on New Project. Beside New File Button.

A window will pop up and ask you what directory you want the project to be in. The purpose of a project in R is to set your working directory permanently. It makes it so you can use relative pathways instead of longer absolute path files.

Click ' Version Control'. This allows you to clone a local copy of the repo to your computer.

Paste the URL into the first box.

Name your project.

Tell it where you want it to live on your computer.

The project will now open and the directory and all of the files will be shown in the 'Files' pane on the bottom right hand side. You should also see a folder called 'renv'. This is a copy of the version of R I created the files in and all the libraries I installed. When you clone the repo, the renv automatically loads. If it does not, go to 'activate.R' and run that code.

For more information about [renv](https://rstudio.github.io/renv/articles/renv.html)

### 3. Create example script and markdown document with citations

Now that the project is loaded, you can now begin coding and creating your own markdown files.

Create an example script and save it in week 4. It can be anything you want, some simple addition or a copy of code you have worked on for your project.

Now the semi-trickier part. Create a markdown document. Click on New File, and Select either 'Quarto Document' or 'R Markdown Document'. Either will work.

Name the file, put in your name or initials as the author. Select 'html' from file type. Select 'Visual' for Editor (optional).

At the top of the document is a header that looks like this

\-\--

title:

author:

format: html

editor: visual

\-\--

This is called a 'yaml' (sometimes called yet another markdown language). This is where you can specify things about your document. You can add a table of contents, what file to use as a reference for bibliography, how to number your pages, what font to use, and more.

In this markdown document, type something, anything. 'It's my first markdown doc' is an uninspiring option.

Now we are going to create a citation. Type something about the paper you would like to cite. Then insert the in-text citation. To do so you can use the '\@' symbol or go to Insert - Citation (along the top bar of your Rmd doc). A pop up window will ask you what format you want your citations to be in, and if you want to generate a '.bib' file. Click yes to the bib file. This is where R will pull the full citations from when you render your document. You won't see the full bibliography until you render the document.

The bibliography is always at the bottom of the page. So what I like to do is insert a Header 1 title and name it 'References' so that I know where the end of my document always is.

### 4. Render Rmarkdown doc

Now that we have a bit of text and a citation. Let's render the document. To do this, click 'Knit' or 'Render' on the top bar. It will open in 'Background Jobs' and it will go through the steps it needs to create the html doc. If there is an error, usually it is an uninstalled package. Fix the error and click render again.

The rendered document is saved in the main branch of your file directory and then opens for you to view.

### 5. Commit changes and push to our Github account

You have now made all of these changes and want to make them visible for the whole group to see. First we have to commit our changes to Git. Click on the Git tab in the top right hand window. All of the documents you created or edited will show up there.

Click Diff. This will let you see all of the changes you made to the files before committing them. Click the box under 'Staged' to tell R you want to stage your changes to GitHub. The differences will show up in the box below with deletions in red and additions in green (sorry color blind people).

Write a short commit message so that you know what you changed. If you ever need to go back and find where a change was made, a well written commit message will make your life a lot easier. Then click 'Commit'.

Repeat this for all of the files you created or changed.

Once you have committed your changes, you need to Push them to GitHub. Committing lets Git know you changed things but it doesn't save it. To save it you need to Push. You can do this from the same pop-up window and press the upwards pointing green arrow. or you can do it from the Git tab.

This pushes it to the branch you created. You can share this branch with collaborators or request that it is merged with the main branch.

### 6. Demo of pull request and merging changes

You need to create a pull request. Go back to the GitHub repo online and select 'Pull Request' tab. Change the branches you are comparing. Put 'main' in the first, and your branch in the second. Then click 'Create pull request'. Then you name your pull request and give a short description of what you are trying to merge. As I am the main collaborator, all requests go to me and I have to approve them. Once everyone has successfully sent a pull request I will merge a few to show you what to do.

Because you are creating new files and not editing existing ones, there is unlikely to be any issues. I am going to show you what it looks like when there are changes to existing files.

## Bonus: Using Open Science Framework

You might notice that I have more files than you. I have 'html' and the Excel sheets are missing from week 1! That's thanks to a file called '.gitignore'. GitHub is meant to be used as a versioning tool and not a place to save files or as a backup.

You can pre-register your research at OSF. You can save all file types here and keep a living history of your project as it changes and evolves. You can link it to GitHub, to Google Drives, and other software. You can also use it to see what other researchers are maybe working on but have not published yet.
